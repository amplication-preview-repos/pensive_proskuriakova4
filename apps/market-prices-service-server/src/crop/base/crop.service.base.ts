/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Crop as PrismaCrop,
  LiveUpdate as PrismaLiveUpdate,
  PriceHistory as PrismaPriceHistory,
} from "@prisma/client";

export class CropServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CropCountArgs, "select">): Promise<number> {
    return this.prisma.crop.count(args);
  }

  async crops(args: Prisma.CropFindManyArgs): Promise<PrismaCrop[]> {
    return this.prisma.crop.findMany(args);
  }
  async crop(args: Prisma.CropFindUniqueArgs): Promise<PrismaCrop | null> {
    return this.prisma.crop.findUnique(args);
  }
  async createCrop(args: Prisma.CropCreateArgs): Promise<PrismaCrop> {
    return this.prisma.crop.create(args);
  }
  async updateCrop(args: Prisma.CropUpdateArgs): Promise<PrismaCrop> {
    return this.prisma.crop.update(args);
  }
  async deleteCrop(args: Prisma.CropDeleteArgs): Promise<PrismaCrop> {
    return this.prisma.crop.delete(args);
  }

  async findLiveUpdates(
    parentId: string,
    args: Prisma.LiveUpdateFindManyArgs
  ): Promise<PrismaLiveUpdate[]> {
    return this.prisma.crop
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .liveUpdates(args);
  }

  async findPriceHistories(
    parentId: string,
    args: Prisma.PriceHistoryFindManyArgs
  ): Promise<PrismaPriceHistory[]> {
    return this.prisma.crop
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .priceHistories(args);
  }
  async FetchAgmarknetPrices(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
