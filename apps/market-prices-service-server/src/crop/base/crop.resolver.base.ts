/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Crop } from "./Crop";
import { CropCountArgs } from "./CropCountArgs";
import { CropFindManyArgs } from "./CropFindManyArgs";
import { CropFindUniqueArgs } from "./CropFindUniqueArgs";
import { CreateCropArgs } from "./CreateCropArgs";
import { UpdateCropArgs } from "./UpdateCropArgs";
import { DeleteCropArgs } from "./DeleteCropArgs";
import { LiveUpdateFindManyArgs } from "../../liveUpdate/base/LiveUpdateFindManyArgs";
import { LiveUpdate } from "../../liveUpdate/base/LiveUpdate";
import { PriceHistoryFindManyArgs } from "../../priceHistory/base/PriceHistoryFindManyArgs";
import { PriceHistory } from "../../priceHistory/base/PriceHistory";
import { CropService } from "../crop.service";
@graphql.Resolver(() => Crop)
export class CropResolverBase {
  constructor(protected readonly service: CropService) {}

  async _cropsMeta(
    @graphql.Args() args: CropCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Crop])
  async crops(@graphql.Args() args: CropFindManyArgs): Promise<Crop[]> {
    return this.service.crops(args);
  }

  @graphql.Query(() => Crop, { nullable: true })
  async crop(@graphql.Args() args: CropFindUniqueArgs): Promise<Crop | null> {
    const result = await this.service.crop(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Crop)
  async createCrop(@graphql.Args() args: CreateCropArgs): Promise<Crop> {
    return await this.service.createCrop({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Crop)
  async updateCrop(@graphql.Args() args: UpdateCropArgs): Promise<Crop | null> {
    try {
      return await this.service.updateCrop({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Crop)
  async deleteCrop(@graphql.Args() args: DeleteCropArgs): Promise<Crop | null> {
    try {
      return await this.service.deleteCrop(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [LiveUpdate], { name: "liveUpdates" })
  async findLiveUpdates(
    @graphql.Parent() parent: Crop,
    @graphql.Args() args: LiveUpdateFindManyArgs
  ): Promise<LiveUpdate[]> {
    const results = await this.service.findLiveUpdates(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [PriceHistory], { name: "priceHistories" })
  async findPriceHistories(
    @graphql.Parent() parent: Crop,
    @graphql.Args() args: PriceHistoryFindManyArgs
  ): Promise<PriceHistory[]> {
    const results = await this.service.findPriceHistories(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.Query(() => String)
  async FetchAgmarknetPrices(
    @graphql.Args("args")
    args: string
  ): Promise<string> {
    return this.service.FetchAgmarknetPrices(args);
  }
}
