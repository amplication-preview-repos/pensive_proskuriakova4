/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsDate,
  IsString,
  ValidateNested,
  IsOptional,
  MaxLength,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { LiveUpdate } from "../../liveUpdate/base/LiveUpdate";
import { PriceHistory } from "../../priceHistory/base/PriceHistory";
import { EnumCropSeason } from "./EnumCropSeason";

@ObjectType()
class Crop {
  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [LiveUpdate],
  })
  @ValidateNested()
  @Type(() => LiveUpdate)
  @IsOptional()
  liveUpdates?: Array<LiveUpdate>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: false,
    type: () => [PriceHistory],
  })
  @ValidateNested()
  @Type(() => PriceHistory)
  @IsOptional()
  priceHistories?: Array<PriceHistory>;

  @ApiProperty({
    required: false,
    enum: EnumCropSeason,
  })
  @IsEnum(EnumCropSeason)
  @IsOptional()
  @Field(() => EnumCropSeason, {
    nullable: true,
  })
  season?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  typeField!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Crop as Crop };
