/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LiveUpdateService } from "../liveUpdate.service";
import { LiveUpdateCreateInput } from "./LiveUpdateCreateInput";
import { LiveUpdate } from "./LiveUpdate";
import { LiveUpdateFindManyArgs } from "./LiveUpdateFindManyArgs";
import { LiveUpdateWhereUniqueInput } from "./LiveUpdateWhereUniqueInput";
import { LiveUpdateUpdateInput } from "./LiveUpdateUpdateInput";

export class LiveUpdateControllerBase {
  constructor(protected readonly service: LiveUpdateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LiveUpdate })
  async createLiveUpdate(
    @common.Body() data: LiveUpdateCreateInput
  ): Promise<LiveUpdate> {
    return await this.service.createLiveUpdate({
      data: {
        ...data,

        crop: data.crop
          ? {
              connect: data.crop,
            }
          : undefined,

        market: data.market
          ? {
              connect: data.market,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        crop: {
          select: {
            id: true,
          },
        },

        id: true,

        market: {
          select: {
            id: true,
          },
        },

        time: true,
        updateMessage: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LiveUpdate] })
  @ApiNestedQuery(LiveUpdateFindManyArgs)
  async liveUpdates(@common.Req() request: Request): Promise<LiveUpdate[]> {
    const args = plainToClass(LiveUpdateFindManyArgs, request.query);
    return this.service.liveUpdates({
      ...args,
      select: {
        createdAt: true,

        crop: {
          select: {
            id: true,
          },
        },

        id: true,

        market: {
          select: {
            id: true,
          },
        },

        time: true,
        updateMessage: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LiveUpdate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async liveUpdate(
    @common.Param() params: LiveUpdateWhereUniqueInput
  ): Promise<LiveUpdate | null> {
    const result = await this.service.liveUpdate({
      where: params,
      select: {
        createdAt: true,

        crop: {
          select: {
            id: true,
          },
        },

        id: true,

        market: {
          select: {
            id: true,
          },
        },

        time: true,
        updateMessage: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LiveUpdate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLiveUpdate(
    @common.Param() params: LiveUpdateWhereUniqueInput,
    @common.Body() data: LiveUpdateUpdateInput
  ): Promise<LiveUpdate | null> {
    try {
      return await this.service.updateLiveUpdate({
        where: params,
        data: {
          ...data,

          crop: data.crop
            ? {
                connect: data.crop,
              }
            : undefined,

          market: data.market
            ? {
                connect: data.market,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          crop: {
            select: {
              id: true,
            },
          },

          id: true,

          market: {
            select: {
              id: true,
            },
          },

          time: true,
          updateMessage: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LiveUpdate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLiveUpdate(
    @common.Param() params: LiveUpdateWhereUniqueInput
  ): Promise<LiveUpdate | null> {
    try {
      return await this.service.deleteLiveUpdate({
        where: params,
        select: {
          createdAt: true,

          crop: {
            select: {
              id: true,
            },
          },

          id: true,

          market: {
            select: {
              id: true,
            },
          },

          time: true,
          updateMessage: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
