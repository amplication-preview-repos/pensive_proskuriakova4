/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LiveUpdate } from "./LiveUpdate";
import { LiveUpdateCountArgs } from "./LiveUpdateCountArgs";
import { LiveUpdateFindManyArgs } from "./LiveUpdateFindManyArgs";
import { LiveUpdateFindUniqueArgs } from "./LiveUpdateFindUniqueArgs";
import { CreateLiveUpdateArgs } from "./CreateLiveUpdateArgs";
import { UpdateLiveUpdateArgs } from "./UpdateLiveUpdateArgs";
import { DeleteLiveUpdateArgs } from "./DeleteLiveUpdateArgs";
import { Crop } from "../../crop/base/Crop";
import { Market } from "../../market/base/Market";
import { LiveUpdateService } from "../liveUpdate.service";
@graphql.Resolver(() => LiveUpdate)
export class LiveUpdateResolverBase {
  constructor(protected readonly service: LiveUpdateService) {}

  async _liveUpdatesMeta(
    @graphql.Args() args: LiveUpdateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LiveUpdate])
  async liveUpdates(
    @graphql.Args() args: LiveUpdateFindManyArgs
  ): Promise<LiveUpdate[]> {
    return this.service.liveUpdates(args);
  }

  @graphql.Query(() => LiveUpdate, { nullable: true })
  async liveUpdate(
    @graphql.Args() args: LiveUpdateFindUniqueArgs
  ): Promise<LiveUpdate | null> {
    const result = await this.service.liveUpdate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LiveUpdate)
  async createLiveUpdate(
    @graphql.Args() args: CreateLiveUpdateArgs
  ): Promise<LiveUpdate> {
    return await this.service.createLiveUpdate({
      ...args,
      data: {
        ...args.data,

        crop: args.data.crop
          ? {
              connect: args.data.crop,
            }
          : undefined,

        market: args.data.market
          ? {
              connect: args.data.market,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => LiveUpdate)
  async updateLiveUpdate(
    @graphql.Args() args: UpdateLiveUpdateArgs
  ): Promise<LiveUpdate | null> {
    try {
      return await this.service.updateLiveUpdate({
        ...args,
        data: {
          ...args.data,

          crop: args.data.crop
            ? {
                connect: args.data.crop,
              }
            : undefined,

          market: args.data.market
            ? {
                connect: args.data.market,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LiveUpdate)
  async deleteLiveUpdate(
    @graphql.Args() args: DeleteLiveUpdateArgs
  ): Promise<LiveUpdate | null> {
    try {
      return await this.service.deleteLiveUpdate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Crop, {
    nullable: true,
    name: "crop",
  })
  async getCrop(@graphql.Parent() parent: LiveUpdate): Promise<Crop | null> {
    const result = await this.service.getCrop(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Market, {
    nullable: true,
    name: "market",
  })
  async getMarket(
    @graphql.Parent() parent: LiveUpdate
  ): Promise<Market | null> {
    const result = await this.service.getMarket(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
