/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LiveUpdate as PrismaLiveUpdate,
  Crop as PrismaCrop,
  Market as PrismaMarket,
} from "@prisma/client";

export class LiveUpdateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LiveUpdateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.liveUpdate.count(args);
  }

  async liveUpdates(
    args: Prisma.LiveUpdateFindManyArgs
  ): Promise<PrismaLiveUpdate[]> {
    return this.prisma.liveUpdate.findMany(args);
  }
  async liveUpdate(
    args: Prisma.LiveUpdateFindUniqueArgs
  ): Promise<PrismaLiveUpdate | null> {
    return this.prisma.liveUpdate.findUnique(args);
  }
  async createLiveUpdate(
    args: Prisma.LiveUpdateCreateArgs
  ): Promise<PrismaLiveUpdate> {
    return this.prisma.liveUpdate.create(args);
  }
  async updateLiveUpdate(
    args: Prisma.LiveUpdateUpdateArgs
  ): Promise<PrismaLiveUpdate> {
    return this.prisma.liveUpdate.update(args);
  }
  async deleteLiveUpdate(
    args: Prisma.LiveUpdateDeleteArgs
  ): Promise<PrismaLiveUpdate> {
    return this.prisma.liveUpdate.delete(args);
  }

  async getCrop(parentId: string): Promise<PrismaCrop | null> {
    return this.prisma.liveUpdate
      .findUnique({
        where: { id: parentId },
      })
      .crop();
  }

  async getMarket(parentId: string): Promise<PrismaMarket | null> {
    return this.prisma.liveUpdate
      .findUnique({
        where: { id: parentId },
      })
      .market();
  }
}
