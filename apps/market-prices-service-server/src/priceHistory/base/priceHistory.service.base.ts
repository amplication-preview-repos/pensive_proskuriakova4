/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PriceHistory as PrismaPriceHistory,
  Crop as PrismaCrop,
  Market as PrismaMarket,
} from "@prisma/client";

export class PriceHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PriceHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.priceHistory.count(args);
  }

  async priceHistories(
    args: Prisma.PriceHistoryFindManyArgs
  ): Promise<PrismaPriceHistory[]> {
    return this.prisma.priceHistory.findMany(args);
  }
  async priceHistory(
    args: Prisma.PriceHistoryFindUniqueArgs
  ): Promise<PrismaPriceHistory | null> {
    return this.prisma.priceHistory.findUnique(args);
  }
  async createPriceHistory(
    args: Prisma.PriceHistoryCreateArgs
  ): Promise<PrismaPriceHistory> {
    return this.prisma.priceHistory.create(args);
  }
  async updatePriceHistory(
    args: Prisma.PriceHistoryUpdateArgs
  ): Promise<PrismaPriceHistory> {
    return this.prisma.priceHistory.update(args);
  }
  async deletePriceHistory(
    args: Prisma.PriceHistoryDeleteArgs
  ): Promise<PrismaPriceHistory> {
    return this.prisma.priceHistory.delete(args);
  }

  async getCrop(parentId: string): Promise<PrismaCrop | null> {
    return this.prisma.priceHistory
      .findUnique({
        where: { id: parentId },
      })
      .crop();
  }

  async getMarket(parentId: string): Promise<PrismaMarket | null> {
    return this.prisma.priceHistory
      .findUnique({
        where: { id: parentId },
      })
      .market();
  }
}
