/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Market as PrismaMarket,
  LiveUpdate as PrismaLiveUpdate,
  PriceHistory as PrismaPriceHistory,
} from "@prisma/client";

export class MarketServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MarketCountArgs, "select">): Promise<number> {
    return this.prisma.market.count(args);
  }

  async markets(args: Prisma.MarketFindManyArgs): Promise<PrismaMarket[]> {
    return this.prisma.market.findMany(args);
  }
  async market(
    args: Prisma.MarketFindUniqueArgs
  ): Promise<PrismaMarket | null> {
    return this.prisma.market.findUnique(args);
  }
  async createMarket(args: Prisma.MarketCreateArgs): Promise<PrismaMarket> {
    return this.prisma.market.create(args);
  }
  async updateMarket(args: Prisma.MarketUpdateArgs): Promise<PrismaMarket> {
    return this.prisma.market.update(args);
  }
  async deleteMarket(args: Prisma.MarketDeleteArgs): Promise<PrismaMarket> {
    return this.prisma.market.delete(args);
  }

  async findLiveUpdates(
    parentId: string,
    args: Prisma.LiveUpdateFindManyArgs
  ): Promise<PrismaLiveUpdate[]> {
    return this.prisma.market
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .liveUpdates(args);
  }

  async findPriceHistories(
    parentId: string,
    args: Prisma.PriceHistoryFindManyArgs
  ): Promise<PrismaPriceHistory[]> {
    return this.prisma.market
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .priceHistories(args);
  }
}
